#!/usr/bin/env python3

import os, errno
import os.path
import sys
import struct

def is_file(buffer, offset=0):
    (header,) = struct.unpack_from('B', buffer, offset)
    return header == 0xf3

def write_file(image_name, output_dir, filename, file):
    output_file = os.path.join(output_dir, filename)
    with open(output_file, mode='wb') as output:
        output.write(file)

def dump_files(image_name, output_dir):
    with open(image_name, mode='rb') as image:
        buffer = image.read()

    header_end = 0x200
    offset = header_end

    # The files found so far are in this format:
    # 0xf3 | filename size (1 byte) | file size (1 short) | filename | data
    # The next file is either immediately following or after NULL padding.

    while is_file(buffer, offset):
        offset += 1 # Skip past file magic number

        filename_size, file_size = struct.unpack_from('>BH', buffer, offset)
        offset += 3

        filename, file = struct.unpack_from(
            '>{0}s{1}s'.format(filename_size, file_size),
            buffer, offset)
        filename = filename.decode('utf-8')

        print("{offset:8x} [{name}] - {size} bytes".format(
            offset=offset-4, name=filename, size=file_size))
        write_file(image_name, output_dir, filename, file)

        offset += filename_size + file_size

        # Skip past NULL padding
        while True:
            (data,) = struct.unpack_from('B', buffer, offset)
            if data == 0:
                offset += 1
            else:
                break

if __name__ == '__main__':
    if len(sys.argv) == 2:
        image_name = sys.argv[1]
        output_dir = image_name + '.extracted'

        try: 
            os.makedirs(output_dir)
        except OSError as e:
            if e.errno != errno.EEXIST:
                raise

        dump_files(image_name, output_dir)
    else:
        print('Usage:', sys.argv[0], '<filename>')
